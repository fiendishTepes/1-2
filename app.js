// app.js

const LS_KEY = 'khalngKruengSales';
let salesData = []; // Array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

// ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LocalStorage
function loadSalesData() {
    const data = localStorage.getItem(LS_KEY);
    salesData = data ? JSON.parse(data) : [];
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
    salesData.sort((a, b) => new Date(a.date) - new Date(b.date));
}

// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á LocalStorage
function saveSalesData() {
    localStorage.setItem(LS_KEY, JSON.stringify(salesData));
}

// ----------------------------------------------------------------------
// ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì: ‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
// ----------------------------------------------------------------------

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô 
 * @param {Array} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà)
 * @returns {Array} - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤
 */
function calculatePayments(data) {
    if (data.length === 0) return [];

    let calculatedData = [];

    data.forEach((sale, index) => {
        const dailySale = parseFloat(sale.amount);
        // 50% ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        const nextDayPayment = dailySale / 2; 
        // 50% ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á (‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠) ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏ó‡∏ö‡πÑ‡∏õ‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏°‡∏∞‡∏£‡∏∑‡∏ô
        const currentRemaining = dailySale / 2; 

        sale.nextDayPayment = nextDayPayment;
        sale.remainingBalance = currentRemaining;
        
        let actualPaymentToday = 0;

        // **‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (T)**
        // ‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ (T) = 50% ‡∏Ç‡∏≠‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (T-1) + ‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 50% ‡∏Ç‡∏≠‡∏á (T-2)
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô' (T-1)
        const yesterdayData = data[index - 1]; 
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á '‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô' (T-2)
        const dayBeforeYesterdayData = data[index - 2]; 

        if (yesterdayData) {
            // 1. ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô 50% ‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á T-1
            const paymentFromYesterday = yesterdayData.nextDayPayment;
            actualPaymentToday += paymentFromYesterday;
        }

        if (dayBeforeYesterdayData) {
            // 2. ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô 50% ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á T-2 (‡∏ã‡∏∂‡πà‡∏á‡∏Ñ‡∏∑‡∏≠ T-2.remainingBalance)
            const remainingFromDayBefore = dayBeforeYesterdayData.remainingBalance;
            actualPaymentToday += remainingFromDayBefore;
        }

        sale.actualPaymentToday = actualPaymentToday;

        if (sale.isReceived === undefined) {
             sale.isReceived = false; 
        }

        calculatedData.push(sale);
    });

    return calculatedData;
}


// ----------------------------------------------------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI ‡πÅ‡∏•‡∏∞ Event Listeners (‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
// ----------------------------------------------------------------------

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Option ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Month Selector
function populateMonthSelector() {
    const selector = document.getElementById('monthSelector');
    selector.innerHTML = ''; 

    const uniqueMonths = [...new Set(salesData.map(sale => sale.date.substring(0, 7)))];
    uniqueMonths.sort().reverse(); 

    const allOption = document.createElement('option');
    allOption.value = 'all';
    allOption.textContent = '‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';
    selector.appendChild(allOption);

    uniqueMonths.forEach(monthYear => {
        const option = document.createElement('option');
        option.value = monthYear;
        const [year, month] = monthYear.split('-');
        option.textContent = `${getMonthName(parseInt(month))} ${year}`;
        selector.appendChild(option);
    });

    if (uniqueMonths.length > 0 && selector.value !== 'all') {
        selector.value = uniqueMonths[0];
    } 
}

// ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function getMonthName(monthNumber) {
    const months = ['‡∏°.‡∏Ñ.', '‡∏Å.‡∏û.', '‡∏°‡∏µ.‡∏Ñ.', '‡πÄ‡∏°.‡∏¢.', '‡∏û.‡∏Ñ.', '‡∏°‡∏¥.‡∏¢.', '‡∏Å.‡∏Ñ.', '‡∏™.‡∏Ñ.', '‡∏Å.‡∏¢.', '‡∏ï.‡∏Ñ.', '‡∏û.‡∏¢.', '‡∏ò.‡∏Ñ.'];
    return months[monthNumber - 1];
}

// ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function displaySalesData() {
    const tableBody = document.getElementById('saleTableBody');
    const monthSelector = document.getElementById('monthSelector');
    const selectedMonth = monthSelector.value;
    
    const calculatedData = calculatePayments(salesData);

    const filteredData = calculatedData.filter(sale => {
        if (selectedMonth === 'all') return true;
        return sale.date.startsWith(selectedMonth);
    });
    
    tableBody.innerHTML = ''; 
    
    if (filteredData.length === 0) {
        tableBody.innerHTML = '<tr><td colspan="7" class="text-center p-4">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ</td></tr>';
        document.getElementById('currentMonthYear').textContent = '';
        return;
    }
    
    const monthYearText = (selectedMonth === 'all' ? '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' : 
        selectedMonth.includes('-') ? `${getMonthName(parseInt(selectedMonth.split('-')[1]))} ${selectedMonth.split('-')[0]}` : '');
    document.getElementById('currentMonthYear').textContent = monthYearText;


    filteredData.forEach((sale, index) => {
        const originalIndex = salesData.findIndex(d => d.date === sale.date);
        
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Toggle
        const statusClass = sale.isReceived ? 'status-received' : 'status-pending';
        const statusText = sale.isReceived ? '‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤'; 

        const row = tableBody.insertRow();
        row.innerHTML = `
            <td data-label="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà">${formatDate(sale.date)}</td>
            <td data-label="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (‡∏ö.)">${sale.amount.toFixed(2)}</td>
            <td data-label="‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ö.)">${sale.nextDayPayment.toFixed(2)}</td>
            <td data-label="‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏ö.)">${sale.remainingBalance.toFixed(2)}</td>
            <td data-label="‡∏¢‡∏≠‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á (‡∏ö.)"><strong>${sale.actualPaymentToday.toFixed(2)}</strong></td>
            
            <td data-label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" class="${statusClass}">
                ${sale.actualPaymentToday > 0 ? 
                    `<button class="btn btn-sm ${sale.isReceived ? 'btn-success' : 'btn-warning'}" 
                             onclick="toggleReceivedStatus(${originalIndex})">
                        ${statusText}
                    </button>` : '<span class="text-muted">N/A</span>'
                }
            </td>
            
            <td data-label="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠">
                <button class="btn btn-sm btn-info me-2" onclick="editSale(${originalIndex}, '${sale.date}', ${sale.amount})">‚úèÔ∏è</button>
                <button class="btn btn-sm btn-danger" onclick="deleteSale(${originalIndex})">üóëÔ∏è</button>
            </td>
        `;
    });
}

// ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô D/M/Y (‡πÅ‡∏ö‡∏ö ISO: YYYY-MM-DD)
function formatDate(dateString) {
    const [year, month, day] = dateString.split('-');
    return `${parseInt(day)}/${parseInt(month)}/${parseInt(year)}`; 
}


// ----------------------------------------------------------------------
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô CRUD ‡πÅ‡∏•‡∏∞ Status Update
// ----------------------------------------------------------------------

// 1. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
document.getElementById('saveSaleBtn').addEventListener('click', () => {
    const dateInput = document.getElementById('saleDate');
    const amountInput = document.getElementById('dailySale');
    const date = dateInput.value;
    const amount = parseFloat(amountInput.value);

    if (!date || isNaN(amount) || amount < 0) { 
        Swal.fire('‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'error');
        return;
    }

    const existingIndex = salesData.findIndex(sale => sale.date === date);

    if (existingIndex !== -1) {
        salesData[existingIndex].amount = amount;
        Swal.fire('‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(date)} ‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏õ‡πá‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó`, 'success');
    } else {
        const newSale = {
            date: date,
            amount: amount,
            isReceived: false 
        };
        salesData.push(newSale);
        Swal.fire('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(date)} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${amount} ‡∏ö‡∏≤‡∏ó`, 'success');
    }

    saveSalesData();
    loadSalesData(); 
    populateMonthSelector();
    displaySalesData();

    amountInput.value = '';
    dateInput.value = new Date().toISOString().substring(0, 10);
});

// 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
function editSale(index, currentDate, currentAmount) {
    Swal.fire({
        title: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(currentDate)}`,
        html: `
            <label for="swal-input1" class="swal2-input-label">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà (‡∏ö‡∏≤‡∏ó):</label>
            <input id="swal-input1" class="swal2-input" type="number" value="${currentAmount}">
        `,
        focusConfirm: false,
        preConfirm: () => {
            const newAmount = parseFloat(document.getElementById('swal-input1').value);
            if (isNaN(newAmount) || newAmount < 0) {
                Swal.showValidationMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                return false;
            }
            return newAmount;
        }
    }).then((result) => {
        if (result.isConfirmed) {
            salesData[index].amount = result.value;
            saveSalesData();
            loadSalesData();
            displaySalesData();
            Swal.fire('‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(currentDate)} ‡πÄ‡∏õ‡πá‡∏ô ${result.value} ‡∏ö‡∏≤‡∏ó`, 'success');
        }
    });
}

// 3. ‡∏•‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
function deleteSale(index) {
    const dateToDelete = salesData[index].date;
     Swal.fire({
        title: '‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
        text: `‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(dateToDelete)} ‡πÉ‡∏ä‡πà‡πÑ‡∏´‡∏°?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡∏ö‡πÄ‡∏•‡∏¢!',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
        if (result.isConfirmed) {
            salesData.splice(index, 1); 
            saveSalesData();
            loadSalesData();
            populateMonthSelector();
            displaySalesData();
            Swal.fire('‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏•‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(dateToDelete)} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');
        }
    });
}

// 4. ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß (Toggle)
function toggleReceivedStatus(index) {
    const saleDate = salesData[index].date;
    const currentStatus = salesData[index].isReceived;
    
    // ‡∏™‡∏•‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    salesData[index].isReceived = !currentStatus; 
    
    saveSalesData();
    displaySalesData();
    
    // ‡πÅ‡∏™‡∏î‡∏á SweetAlert ‡πÅ‡∏à‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    Swal.fire({
        icon: 'info',
        title: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó',
        text: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏≤‡∏Å‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${formatDate(saleDate)} ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô ${!currentStatus ? '‚úÖ ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡∏£‡∏≠‡∏£‡∏±‡∏ö'}`,
        timer: 1500,
        showConfirmButton: false
    });
}

// 5. ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
document.getElementById('clearDataBtn').addEventListener('click', () => {
    Swal.fire({
        title: '‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!',
        text: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#d33',
        cancelButtonColor: '#3085d6',
        confirmButtonText: '‡πÉ‡∏ä‡πà, ‡∏•‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!',
        cancelButtonText: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    }).then((result) => {
        if (result.isConfirmed) {
            localStorage.removeItem(LS_KEY);
            salesData = [];
            populateMonthSelector();
            displaySalesData();
            Swal.fire('‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß', 'success');
        }
    });
});


// 6. Export to Excel (CSV-like)
document.getElementById('exportBtn').addEventListener('click', () => {
    const dataToExport = calculatePayments(salesData).map(sale => ({
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': sale.date,
        '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á (‡∏ö‡∏≤‡∏ó)': sale.amount,
        '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (50%)': sale.nextDayPayment,
        '‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (50%)': sale.remainingBalance,
        '‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏à‡∏£‡∏¥‡∏á (‡∏ö‡∏≤‡∏ó)': sale.actualPaymentToday,
        '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô': sale.isReceived ? '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß' : '‡∏£‡∏≠‡∏£‡∏±‡∏ö',
    }));
    
    if (dataToExport.length === 0) {
        Swal.fire('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Export', 'warning');
        return;
    }

    const ws = XLSX.utils.json_to_sheet(dataToExport);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á");
    XLSX.writeFile(wb, "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á_Export.xlsx");
    
    Swal.fire('Export ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');
});

// 7. Import from Excel
document.getElementById('importBtn').addEventListener('click', () => {
    Swal.fire({
        title: '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Import)',
        html: `
            <p><strong>‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:</strong> ‡πÑ‡∏ü‡∏•‡πå Excel ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD) ‡πÅ‡∏•‡∏∞ "‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á (‡∏ö‡∏≤‡∏ó)"</p>
            <input type="file" id="importFile" accept=".xlsx, .xls" class="swal2-file">
        `,
        showCancelButton: true,
        confirmButtonText: '‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤',
        preConfirm: () => {
            const file = document.getElementById('importFile').files[0];
            if (!file) {
                Swal.showValidationMessage('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå');
                return false;
            }
            return file;
        }
    }).then((result) => {
        if (result.isConfirmed) {
            const file = result.value;
            const reader = new FileReader();
            reader.onload = (e) => {
                const data = new Uint8Array(e.target.result);
                const workbook = XLSX.read(data, { type: 'array' });
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const json = XLSX.utils.sheet_to_json(worksheet); 
                
                const importedData = json.map(row => ({
                    date: row['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], 
                    amount: parseFloat(row['‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏•‡∏∞‡∏Ñ‡∏£‡∏∂‡πà‡∏á (‡∏ö‡∏≤‡∏ó)']),
                    isReceived: row['‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô'] === '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß' 
                })).filter(item => item.date && !isNaN(item.amount));
                
                importedData.forEach(item => {
                    const existingIndex = salesData.findIndex(sale => sale.date === item.date);
                    if (existingIndex !== -1) {
                         salesData[existingIndex] = item;
                    } else {
                         salesData.push(item);
                    }
                });

                saveSalesData();
                loadSalesData();
                populateMonthSelector();
                displaySalesData();
                Swal.fire('‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', `‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${importedData.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'success');

            };
            reader.readAsArrayBuffer(file);
        }
    });
});

// Event Listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
document.getElementById('monthSelector').addEventListener('change', displaySalesData);

// ----------------------------------------------------------------------
// ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
// ----------------------------------------------------------------------

document.addEventListener('DOMContentLoaded', () => {
    const today = new Date().toISOString().substring(0, 10);
    document.getElementById('saleDate').value = today;
    
    loadSalesData();
    populateMonthSelector();
    displaySalesData();

    // PWA Service Worker
    if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
            navigator.serviceWorker.register('/service-worker.js')
                .then(reg => console.log('Service Worker: Registered'))
                .catch(err => console.error('Service Worker: Registration failed: ', err));
        });
    }
});